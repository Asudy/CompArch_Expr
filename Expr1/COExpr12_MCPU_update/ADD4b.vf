////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ADD4b.vf
// /___/   /\     Timestamp : 07/08/2020 16:46:10
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath Y:/Desktop/OExp09-IP2MCPU/ipcore_dir -intstyle ise -family kintex7 -verilog Y:/Desktop/OExp09-IP2MCPU/ADD4b.vf -w Y:/Desktop/OExp09-IP2MCPU/ADD4b.sch
//Design Name: ADD4b
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module CLA_MUSER_ADD4b(CI, 
                       G0, 
                       G1, 
                       G2, 
                       G3, 
                       P0, 
                       P1, 
                       P2, 
                       P3, 
                       C1, 
                       C2, 
                       C3, 
                       GG, 
                       GP);

    input CI;
    input G0;
    input G1;
    input G2;
    input G3;
    input P0;
    input P1;
    input P2;
    input P3;
   output C1;
   output C2;
   output C3;
   output GG;
   output GP;
   
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   
   OR4  XLXI_1 (.I0(G3), 
               .I1(XLXN_16), 
               .I2(XLXN_17), 
               .I3(XLXN_18), 
               .O(GG));
   AND3  XLXI_2 (.I0(P3), 
                .I1(P2), 
                .I2(G1), 
                .O(XLXN_17));
   AND4  XLXI_3 (.I0(P3), 
                .I1(P2), 
                .I2(P1), 
                .I3(G0), 
                .O(XLXN_18));
   AND2  XLXI_4 (.I0(P3), 
                .I1(G2), 
                .O(XLXN_16));
   AND4  XLXI_5 (.I0(P3), 
                .I1(P2), 
                .I2(P1), 
                .I3(P0), 
                .O(GP));
   AND2  XLXI_6 (.I0(P2), 
                .I1(G1), 
                .O(XLXN_25));
   AND3  XLXI_7 (.I0(P2), 
                .I1(P1), 
                .I2(G0), 
                .O(XLXN_24));
   AND4  XLXI_8 (.I0(P2), 
                .I1(P1), 
                .I2(P0), 
                .I3(CI), 
                .O(XLXN_26));
   OR4  XLXI_9 (.I0(G2), 
               .I1(XLXN_25), 
               .I2(XLXN_24), 
               .I3(XLXN_26), 
               .O(C3));
   OR3  XLXI_10 (.I0(G1), 
                .I1(XLXN_27), 
                .I2(XLXN_28), 
                .O(C2));
   OR2  XLXI_11 (.I0(G0), 
                .I1(XLXN_29), 
                .O(C1));
   AND2  XLXI_12 (.I0(P1), 
                 .I1(G0), 
                 .O(XLXN_27));
   AND3  XLXI_13 (.I0(P1), 
                 .I1(P0), 
                 .I2(CI), 
                 .O(XLXN_28));
   AND2  XLXI_14 (.I0(P0), 
                 .I1(CI), 
                 .O(XLXN_29));
endmodule
`timescale 1ns / 1ps

module add_MUSER_ADD4b(ai, 
                       bi, 
                       ci, 
                       co, 
                       Gi, 
                       Pi, 
                       si);

    input ai;
    input bi;
    input ci;
   output co;
   output Gi;
   output Pi;
   output si;
   
   wire XLXN_8;
   wire Pi_DUMMY;
   wire Gi_DUMMY;
   
   assign Gi = Gi_DUMMY;
   assign Pi = Pi_DUMMY;
   XOR2  XLXI_1 (.I0(bi), 
                .I1(ai), 
                .O(Pi_DUMMY));
   AND2  XLXI_2 (.I0(ai), 
                .I1(bi), 
                .O(Gi_DUMMY));
   XOR2  XLXI_3 (.I0(ci), 
                .I1(Pi_DUMMY), 
                .O(si));
   AND2  XLXI_4 (.I0(ci), 
                .I1(Pi_DUMMY), 
                .O(XLXN_8));
   OR2  XLXI_5 (.I0(Gi_DUMMY), 
               .I1(XLXN_8), 
               .O(co));
endmodule
`timescale 1ns / 1ps

module ADD4b(ai, 
             bi, 
             C0, 
             GG, 
             GP, 
             s);

    input [3:0] ai;
    input [3:0] bi;
    input C0;
   output GG;
   output GP;
   output [3:0] s;
   
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   
   add_MUSER_ADD4b  XLXI_1 (.ai(ai[3]), 
                           .bi(bi[3]), 
                           .ci(XLXN_37), 
                           .co(), 
                           .Gi(XLXN_35), 
                           .Pi(XLXN_36), 
                           .si(s[3]));
   add_MUSER_ADD4b  XLXI_2 (.ai(ai[2]), 
                           .bi(bi[2]), 
                           .ci(XLXN_38), 
                           .co(), 
                           .Gi(XLXN_52), 
                           .Pi(XLXN_51), 
                           .si(s[2]));
   add_MUSER_ADD4b  XLXI_3 (.ai(ai[1]), 
                           .bi(bi[1]), 
                           .ci(XLXN_39), 
                           .co(), 
                           .Gi(XLXN_50), 
                           .Pi(XLXN_49), 
                           .si(s[1]));
   add_MUSER_ADD4b  XLXI_4 (.ai(ai[0]), 
                           .bi(bi[0]), 
                           .ci(C0), 
                           .co(), 
                           .Gi(XLXN_41), 
                           .Pi(XLXN_40), 
                           .si(s[0]));
   CLA_MUSER_ADD4b  XLXI_5 (.CI(C0), 
                           .G0(XLXN_41), 
                           .G1(XLXN_50), 
                           .G2(XLXN_52), 
                           .G3(XLXN_35), 
                           .P0(XLXN_40), 
                           .P1(XLXN_49), 
                           .P2(XLXN_51), 
                           .P3(XLXN_36), 
                           .C1(XLXN_39), 
                           .C2(XLXN_38), 
                           .C3(XLXN_37), 
                           .GG(GG), 
                           .GP(GP));
endmodule
